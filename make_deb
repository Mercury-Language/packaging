#!/bin/sh -e
# A stupid script to deal with stupid tools.

if test -z "$1"
then
    echo "usage: $0 mercury-*.tar.gz"
    exit 1
fi

tarball=$1
if test ! -f "$tarball"
then
    echo "Expected source tarball: $tarball" 1>&2
    exit 1
fi

# Check we have some tools.
if ! type dch >/dev/null 2>/dev/null
then
    echo "Missing dch: try apt-get install debhelper"
    exit 1
fi
if ! type makeinfo >/dev/null 2>/dev/null
then
    echo "Missing makeinfo: try apt-get install texinfo"
    exit 1
fi

# Filename formats:
#   mercury-srcdist-13.05.2.tar.gz
#   mercury-srcdist-14.01.tar.gz
#   mercury-srcdist-14.01.1-beta-2014-08-04.tar.gz
#   mercury-srcdist-rotd-2014-08-04.tar.gz

base=$( basename $tarball )
base=${base%.tar.*}
version=${base#mercury-srcdist-}
case $version in
    rotd-2[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])
        version=${version#rotd-}
        mode=rotd
        ;;
    [0-9][0-9]*-beta-*)
        mode=beta
        ;;
    [0-9][0-9].[0-9][0-9]*)
        mode=release
        ;;
    *)
        echo "Could not extract version from filename: $tarball" 1>&2
        exit 1
        ;;
esac

echo "Version $version ($mode)"

echo "Extracting $tarball"
tar xf $tarball

echo "Entering directory $base"
cd "$base"

echo "Copying debian directory"
cp -r ../debian .

echo "Updating debian/changelog"

case $mode in
    rotd)
        dch -m -v ${version}-1 'Release of the day.'
        ;;
    beta)
        dch -m -b -v ${version} "Beta version ${version}"
        ;;
    release)
        dch -m -b -v ${version} "Release version ${version}"
        ;;
esac

echo "Building binary package:"
nprocs=$( grep -e '^processor' -c /proc/cpuinfo )
DEB_BUILD_OPTIONS="parallel=${nprocs}" debuild -i -uc -us -b

echo "done."
echo "You can delete $base if you like."
exit 0

# vim: set et:
